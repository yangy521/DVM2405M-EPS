<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [DVM2404_G4\DVM2404_G4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image DVM2404_G4\DVM2404_G4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu May 08 14:51:19 2025
<BR><P>
<H3>Maximum Stack Usage =        392 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SysInit &rArr; Bsp_Init &rArr; MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[17d]">_IQ24mpy</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[47]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">NMI_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from stm32g4xx_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[55]">ADC4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[56]">ADC5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[78]">ADC_DMAConvCplt</a> from stm32g4xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[7a]">ADC_DMAError</a> from stm32g4xx_hal_adc.o(i.ADC_DMAError) referenced from stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[79]">ADC_DMAHalfConvCplt</a> from stm32g4xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32g4xx_it.o(i.BusFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[58]">COMP1_2_3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[59]">COMP4_5_6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5a]">COMP7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[73]">CORDIC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5b]">CRS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7c]">CurrentSampleCalc</a> from fdb.o(i.CurrentSampleCalc) referenced from fdb.o(i.InitFeedbackDevice)
 <LI><a href="#[7d]">CurrentSampleCalcZeroDrift</a> from fdb.o(i.CurrentSampleCalcZeroDrift) referenced from fdb.o(i.InitFeedbackDevice)
 <LI><a href="#[7b]">CurrentSampleInit</a> from fdb.o(i.CurrentSampleInit) referenced from fdb.o(i.InitFeedbackDevice)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6f]">DMA1_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[70]">DMA2_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[71]">DMA2_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[72]">DMA2_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6d]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32g4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2d]">FDCAN1_IT0_IRQHandler</a> from stm32g4xx_it.o(i.FDCAN1_IT0_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[65]">FDCAN2_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[66]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[67]">FDCAN3_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[68]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[74]">FMAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[48]">FMC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[61]">FPU_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32g4xx_it.o(i.HardFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6c]">I2C3_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6b]">I2C3_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[63]">I2C4_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[62]">I2C4_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5]">ICANLogicIn_Master_From_Hmi</a> from icanplc.o(i.ICANLogicIn_Master_From_Hmi) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[1]">ICANLogicIn_Master_From_Lift</a> from icanplc.o(i.ICANLogicIn_Master_From_Lift) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[4]">ICANLogicIn_Master_From_Logic</a> from icanplc.o(i.ICANLogicIn_Master_From_Logic) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[0]">ICANLogicIn_Master_From_Move</a> from icanplc.o(i.ICANLogicIn_Master_From_Move) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[6]">ICANLogicIn_Master_From_Pc</a> from icanplc.o(i.ICANLogicIn_Master_From_Pc) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[3]">ICANLogicIn_Master_From_Smove</a> from icanplc.o(i.ICANLogicIn_Master_From_Smove) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[2]">ICANLogicIn_Master_From_Steer</a> from icanplc.o(i.ICANLogicIn_Master_From_Steer) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[c]">ICANLogicOut_Master_To_Hmi</a> from icanplc.o(i.ICANLogicOut_Master_To_Hmi) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[8]">ICANLogicOut_Master_To_Lift</a> from icanplc.o(i.ICANLogicOut_Master_To_Lift) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[b]">ICANLogicOut_Master_To_Logic</a> from icanplc.o(i.ICANLogicOut_Master_To_Logic) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[7]">ICANLogicOut_Master_To_Move</a> from icanplc.o(i.ICANLogicOut_Master_To_Move) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[d]">ICANLogicOut_Master_To_Pc</a> from icanplc.o(i.ICANLogicOut_Master_To_Pc) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[a]">ICANLogicOut_Master_To_Smove</a> from icanplc.o(i.ICANLogicOut_Master_To_Smove) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[9]">ICANLogicOut_Master_To_Steer</a> from icanplc.o(i.ICANLogicOut_Master_To_Steer) referenced 2 times from icanplc.o(.data)
 <LI><a href="#[49]">LPTIM1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6a]">LPUART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32g4xx_it.o(i.MemManage_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32g4xx_it.o(i.NMI_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7e]">Null</a> from plc.o(i.Null) referenced from plc.o(i.InitPLCLogic)
 <LI><a href="#[19]">PVD_PVM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32g4xx_it.o(i.PendSV_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6e]">QUADSPI_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[69]">RNG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1a]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1b]">RTC_WKUP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5c]">SAI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[64]">SPI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32g4xx_it.o(i.SVC_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32g4xx_it.o(i.SysTick_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[76]">SystemInit</a> from system_stm32g4xx.o(i.SystemInit) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[30]">TIM1_BRK_TIM15_IRQHandler</a> from stm32g4xx_it.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_TIM16_IRQHandler</a> from stm32g4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5d]">TIM20_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[60]">TIM20_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5f]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5e]">TIM20_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4f]">TIM7_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from stm32g4xx_it.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7f]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[7f]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[82]">UART_RxISR_16BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[80]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[80]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[81]">UART_RxISR_8BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[57]">UCPD1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from stm32g4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2b]">USB_HP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2c]">USB_LP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32g4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[77]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[75]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[77]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[1ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[83]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSetPosition
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgVariable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSetPosition
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgVariable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSetPosition
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgVariable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgVariable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSetPosition
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1b6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1b7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1b9]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[84]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ba]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_IQ24mpy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, IQNmpy.o(_IQ24mpy))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDriver
</UL>

<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[7a]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[79]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[99]"></a>ADC_Disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[9b]"></a>ADC_Enable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32g4xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
</UL>

<P><STRONG><a name="[159]"></a>AlarmICANRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, message.o(i.AlarmICANRegister))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANNetManage_Master
</UL>

<P><STRONG><a name="[9c]"></a>AutoTuneWiper</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, autotune.o(i.AutoTuneWiper))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AutoTuneWiper &rArr; SaveParaToEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ClearFault
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
</UL>

<P><STRONG><a name="[a0]"></a>Bsp_Init</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, device.o(i.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Bsp_Init &rArr; MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Unlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Lock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>CANFrmSend</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, canstm32g4.o(i.CANFrmSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CANFrmSend &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANReadBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetTxFifoFreeLevel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[ba]"></a>CANReadBuffer</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, canstm32g4.o(i.CANReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
</UL>

<P><STRONG><a name="[103]"></a>CANWriteBuffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, canstm32g4.o(i.CANWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICAN_DOProc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[14d]"></a>CanOpenRxFrame</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, canopen_qexpandagvv04.o(i.CanOpenRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanOpenRxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
</UL>

<P><STRONG><a name="[bd]"></a>CfgVariable</STRONG> (Thumb, 866 bytes, Stack size 64 bytes, commonram.o(i.CfgVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CfgVariable &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
</UL>

<P><STRONG><a name="[be]"></a>ChangeModScs</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, mc_motorcontrol_layer.o(i.ChangeModScs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ChangeModScs &rArr; GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewTargetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Homing
</UL>

<P><STRONG><a name="[c0]"></a>ControllerISR</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, mc_motorcontrol_layer.o(i.ControllerISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ControllerISR &rArr; FeedbackProcess &rArr; FeedbackOvLoadCheck &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUpdate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedbackProcess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>CurrentSampleCalc</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, fdb.o(i.CurrentSampleCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CurrentSampleCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedGetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb.o(i.InitFeedbackDevice)
</UL>
<P><STRONG><a name="[7d]"></a>CurrentSampleCalcZeroDrift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fdb.o(i.CurrentSampleCalcZeroDrift))
<BR>[Address Reference Count : 1]<UL><LI> fdb.o(i.InitFeedbackDevice)
</UL>
<P><STRONG><a name="[7b]"></a>CurrentSampleInit</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, fdb.o(i.CurrentSampleInit))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFeedbackDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fdb.o(i.InitFeedbackDevice)
</UL>
<P><STRONG><a name="[c5]"></a>DOProcess</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, plclogic.o(i.DOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DOProcess &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>EepromQualifiedRead</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, para.o(i.EepromQualifiedRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EepromQualifiedRead &rArr; EepromRead &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaFromEeprom
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHardParaToEeprom
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHardParaFromEeprom
</UL>

<P><STRONG><a name="[c9]"></a>EepromQualifiedWrite</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, para.o(i.EepromQualifiedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaFromEeprom
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Handle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHardParaToEeprom
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHardParaFromEeprom
</UL>

<P><STRONG><a name="[c8]"></a>EepromRead</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, device.o(i.EepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EepromRead &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
</UL>

<P><STRONG><a name="[ca]"></a>EepromWrite</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, device.o(i.EepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
</UL>

<P><STRONG><a name="[ed]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[2d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_TxFifoEmptyCallback &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[106]"></a>FLASH_PageErase</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[cf]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32g4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_OB_Launch
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
</UL>

<P><STRONG><a name="[d1]"></a>FeedbackOvLoadCheck</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdb.o(i.FeedbackOvLoadCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FeedbackOvLoadCheck &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableEsp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedbackProcess
</UL>

<P><STRONG><a name="[c1]"></a>FeedbackProcess</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fdb.o(i.FeedbackProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FeedbackProcess &rArr; FeedbackOvLoadCheck &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedbackOvLoadCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerISR
</UL>

<P><STRONG><a name="[d3]"></a>GetCmdPercent</STRONG> (Thumb, 710 bytes, Stack size 40 bytes, mc_motorcontrol_layer.o(i.GetCmdPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetCmdPercent &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[14f]"></a>GetDataByte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.GetDataByte))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANMacIDCheck
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
</UL>

<P><STRONG><a name="[bf]"></a>GetNewTargetValue</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, mc_motorcontrol_layer.o(i.GetNewTargetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModScs
</UL>

<P><STRONG><a name="[19a]"></a>GetSum8_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, packet.o(i.GetSum8_size))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataOutManage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
</UL>

<P><STRONG><a name="[d8]"></a>GetSysProcedure</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, icanlogic.o(i.GetSysProcedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSysProcedure &rArr; NetOnlineCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetOnlineCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[b4]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 1322 bytes, Stack size 40 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_ADCEx_InjectedGetValue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedGetValue))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSampleCalc
</UL>

<P><STRONG><a name="[e0]"></a>HAL_ADCEx_InjectedStart</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADCEx_InjectedStart &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
</UL>

<P><STRONG><a name="[e1]"></a>HAL_ADCEx_InjectedStart_IT</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedStart_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
</UL>

<P><STRONG><a name="[e2]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 318 bytes, Stack size 144 bytes, stm32g4xx_hal_adc_ex.o(i.HAL_ADCEx_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 1064 bytes, Stack size 40 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[98]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[95]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e9]"></a>HAL_ADC_Init</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, stm32g4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32g4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ee]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
</UL>

<P><STRONG><a name="[fe]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[b9]"></a>HAL_FDCAN_GetTxFifoFreeLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_GetTxFifoFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
</UL>

<P><STRONG><a name="[f4]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_TxFifoEmptyCallback &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, canstm32g4.o(i.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANWriteBuffer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, canstm32g4.o(i.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_FDCAN_RxFifo1Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[fc]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan.o(i.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, canstm32g4.o(i.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_FDCAN_TxFifoEmptyCallback &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANReadBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32g4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a4]"></a>HAL_FLASHEx_OBProgram</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, stm32g4xx_hal_flash_ex.o(i.HAL_FLASHEx_OBProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_FLASHEx_OBProgram &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a5]"></a>HAL_FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_OB_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_FLASH_OB_Lock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_OB_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_FLASH_OB_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_OB_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a2]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[eb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 422 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Homing
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
</UL>

<P><STRONG><a name="[189]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[cb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpProcess
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDO
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>

<P><STRONG><a name="[b1]"></a>HAL_IWDG_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32g4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32g4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
</UL>

<P><STRONG><a name="[bc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[10c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[110]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(i.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[112]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 758 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[113]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[114]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[115]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1036 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[116]"></a>HAL_SPI_Init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32g4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromRead
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIMEx_DirectionChangeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_DirectionChangeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_TIMEx_EnableDeadTimePreload</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_EnableDeadTimePreload))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIMEx_EncoderIndexCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_EncoderIndexCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIMEx_IndexErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_IndexErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIMEx_TransitionErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim_ex.o(i.HAL_TIMEx_TransitionErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Encoder_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_TransitionErrorCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_IndexErrorCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EncoderIndexCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_DirectionChangeCallback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, stm32g4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UARTEx_EnableFifoMode &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[140]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_UART_MspInit</STRONG> (Thumb, 158 bytes, Stack size 128 bytes, stm32g4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[147]"></a>HMIConfig_Master</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, icanlogic.o(i.HMIConfig_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HMIConfig_Master &rArr; ReadParaValByIndex &rArr; ReadParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaValByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[1a8]"></a>HMIIdle_Master</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icanlogic.o(i.HMIIdle_Master))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[149]"></a>HMIMonitor_Master</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, icanlogic.o(i.HMIMonitor_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HMIMonitor_Master
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMonitorParaValByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[1a6]"></a>HMIPcIdle_Master</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, icanlogic.o(i.HMIPcIdle_Master))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>Homing</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, mc_motorcontrol_layer.o(i.Homing))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Homing &rArr; ChangeModScs &rArr; GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModScs
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[14e]"></a>ICANAddSlave</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, ican_master.o(i.ICANAddSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ICANAddSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
</UL>

<P><STRONG><a name="[14c]"></a>ICANDataInManage_Master</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, ican_master.o(i.ICANDataInManage_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ICANDataInManage_Master &rArr; ICANReceive &rArr; ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataByte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanOpenRxFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANReadBuffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANAddSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[152]"></a>ICANDataOutManage_Master</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, ican_master.o(i.ICANDataOutManage_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ICANDataOutManage_Master &rArr; ICANSetConnect &rArr; ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgICANPop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAdd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICAN_DOProc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSetConnect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANMacIDCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[185]"></a>ICANInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icanplc.o(i.ICANInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1bd]"></a>ICANInitialize_Master</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ican_master.o(i.ICANInitialize_Master), UNUSED)

<P><STRONG><a name="[1a5]"></a>ICANLogicIn_Master</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, icanplc.o(i.ICANLogicIn_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ICANLogicIn_Master
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[5]"></a>ICANLogicIn_Master_From_Hmi</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Hmi))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>ICANLogicIn_Master_From_Lift</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Lift))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ICANLogicIn_Master_From_Logic</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Logic))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>ICANLogicIn_Master_From_Move</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Move))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ICANLogicIn_Master_From_Pc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Pc))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ICANLogicIn_Master_From_Smove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Smove))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ICANLogicIn_Master_From_Steer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicIn_Master_From_Steer))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[1aa]"></a>ICANLogicOut_Master</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, icanplc.o(i.ICANLogicOut_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ICANLogicOut_Master
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[c]"></a>ICANLogicOut_Master_To_Hmi</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Hmi))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ICANLogicOut_Master_To_Lift</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Lift))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ICANLogicOut_Master_To_Logic</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Logic))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ICANLogicOut_Master_To_Move</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Move))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ICANLogicOut_Master_To_Pc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Pc))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ICANLogicOut_Master_To_Smove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Smove))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ICANLogicOut_Master_To_Steer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icanplc.o(i.ICANLogicOut_Master_To_Steer))
<BR>[Address Reference Count : 1]<UL><LI> icanplc.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>ICANMacIDCheck</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ican_master.o(i.ICANMacIDCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ICANMacIDCheck &rArr; ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
</UL>

<P><STRONG><a name="[158]"></a>ICANNetManage_Master</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ican_master.o(i.ICANNetManage_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ICANNetManage_Master
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmICANRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[151]"></a>ICANReceive</STRONG> (Thumb, 804 bytes, Stack size 32 bytes, ican_master.o(i.ICANReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ICANReceive &rArr; ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetNetTimer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgICANRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
</UL>

<P><STRONG><a name="[150]"></a>ICANSend</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ican_master.o(i.ICANSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSetConnect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANMacIDCheck
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
</UL>

<P><STRONG><a name="[154]"></a>ICANSetConnect</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ican_master.o(i.ICANSetConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ICANSetConnect &rArr; ICANSend &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSend
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
</UL>

<P><STRONG><a name="[1a9]"></a>ICANSysMatch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icanlogic.o(i.ICANSysMatch))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[157]"></a>ICAN_DOProc</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ican_master.o(i.ICAN_DOProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICAN_DOProc &rArr; CANWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
</UL>

<P><STRONG><a name="[15c]"></a>InitCommonRam</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, commonram.o(i.InitCommonRam))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[15e]"></a>InitFeedbackDevice</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fdb.o(i.InitFeedbackDevice))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentSampleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[15f]"></a>InitPLCCtl</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, mc_motorcontrol_layer.o(i.InitPLCCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InitPLCCtl &rArr; ChangeModScs &rArr; GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgVariable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModScs
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[161]"></a>InitPLCLogic</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, plc.o(i.InitPLCLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitPLCLogic &rArr; PacketInit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memzero
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpInit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[167]"></a>InitPara</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, para.o(i.InitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = InitPara &rArr; SaveParaToEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaFromEeprom
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHardParaToEeprom
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHardParaFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[16b]"></a>InitSysCtrl</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, device.o(i.InitSysCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitSysCtrl &rArr; HAL_ADCEx_InjectedStart_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[15d]"></a>InitVariable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, commonram.o(i.InitVariable))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommonRam
</UL>

<P><STRONG><a name="[d4]"></a>KillNetTimer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, itimer.o(i.KillNetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANNetManage_Master
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
</UL>

<P><STRONG><a name="[163]"></a>LEDInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, plc.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDInit &rArr; LedStateShow
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStateShow
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
</UL>

<P><STRONG><a name="[16e]"></a>LEDProcess</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, plc.o(i.LEDProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LEDProcess &rArr; LedStateShow
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedStateShow
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[16d]"></a>LedStateShow</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, plc.o(i.LedStateShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedStateShow
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDProcess
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
</UL>

<P><STRONG><a name="[16f]"></a>LocalDI</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, plclogic.o(i.LocalDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LocalDI &rArr; AutoTuneWiper &rArr; SaveParaToEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTuneWiper
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[170]"></a>LocalDO</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, plclogic.o(i.LocalDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LocalDO &rArr; PWMDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[172]"></a>MCL_ChkPowerStatue</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, mc_motorcontrol_layer.o(i.MCL_ChkPowerStatue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCL_ChkPowerStatue &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_Chk_BusVolt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[173]"></a>MCL_Chk_BusVolt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mc_motorcontrol_layer.o(i.MCL_Chk_BusVolt))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
</UL>

<P><STRONG><a name="[9f]"></a>MCL_ClearFault</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mc_motorcontrol_layer.o(i.MCL_ClearFault))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTuneWiper
</UL>

<P><STRONG><a name="[9d]"></a>MCL_SetFault</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mc_motorcontrol_layer.o(i.MCL_SetFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedbackOvLoadCheck
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Homing
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataLogicManage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTuneWiper
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHardParaToEeprom
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHardParaFromEeprom
</UL>

<P><STRONG><a name="[174]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, device.o(i.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>MsgAdd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, message.o(i.MsgAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MsgAdd &rArr; QueueWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
</UL>

<P><STRONG><a name="[156]"></a>MsgICANPop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, message.o(i.MsgICANPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MsgICANPop
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueRead
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueNData
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
</UL>

<P><STRONG><a name="[15b]"></a>MsgICANRegister</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, message.o(i.MsgICANRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MsgICANRegister &rArr; QueueWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
</UL>

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>NetOnlineCheck</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, icanlogic.o(i.NetOnlineCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NetOnlineCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysProcedure
</UL>

<P><STRONG><a name="[7e]"></a>Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, plc.o(i.Null))
<BR>[Address Reference Count : 1]<UL><LI> plc.o(i.InitPLCLogic)
</UL>
<P><STRONG><a name="[17b]"></a>PCConfig_Master</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, icanlogic.o(i.PCConfig_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PCConfig_Master &rArr; ReadParaValByIndex &rArr; ReadParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaValByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[1a7]"></a>PCIdle_Master</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, icanlogic.o(i.PCIdle_Master))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[17c]"></a>PCMonitor_Master</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, icanlogic.o(i.PCMonitor_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PCMonitor_Master
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMonitorParaValByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
</UL>

<P><STRONG><a name="[171]"></a>PWMDriver</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, device.o(i.PWMDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PWMDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IQ24mpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDO
</UL>

<P><STRONG><a name="[166]"></a>PacketInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, packet.o(i.PacketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PacketInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>PowerOff_Handle</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.PowerOff_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PowerOff_Handle &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>Protection</STRONG> (Thumb, 796 bytes, Stack size 48 bytes, mc_motorcontrol_layer.o(i.Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Protection &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[d2]"></a>PwmDisableEsp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, device.o(i.PwmDisableEsp))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedbackOvLoadCheck
</UL>

<P><STRONG><a name="[160]"></a>PwmEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device.o(i.PwmEnable))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
</UL>

<P><STRONG><a name="[c3]"></a>PwmUpdate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, device.o(i.PwmUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerISR
</UL>

<P><STRONG><a name="[179]"></a>QueueNData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(i.QueueNData))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgICANPop
</UL>

<P><STRONG><a name="[17a]"></a>QueueRead</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, queue.o(i.QueueRead))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgICANPop
</UL>

<P><STRONG><a name="[178]"></a>QueueWrite</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, queue.o(i.QueueWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QueueWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgICANRegister
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAdd
</UL>

<P><STRONG><a name="[19b]"></a>RXData_to_CtrlRam</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, packet.o(i.RXData_to_CtrlRam))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
</UL>

<P><STRONG><a name="[168]"></a>ReadHardParaFromEeprom</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, para.o(i.ReadHardParaFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadHardParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara
</UL>

<P><STRONG><a name="[14a]"></a>ReadMonitorParaValByIndex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, para.o(i.ReadMonitorParaValByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Master
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIMonitor_Master
</UL>

<P><STRONG><a name="[16a]"></a>ReadParaFromEeprom</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, para.o(i.ReadParaFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaValByIndex
</UL>

<P><STRONG><a name="[148]"></a>ReadParaValByIndex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, para.o(i.ReadParaValByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ReadParaValByIndex &rArr; ReadParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCConfig_Master
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIConfig_Master
</UL>

<P><STRONG><a name="[15a]"></a>ResetNetTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, itimer.o(i.ResetNetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANReceive
</UL>

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>SaveHardParaToEeprom</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, para.o(i.SaveHardParaToEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SaveHardParaToEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara
</UL>

<P><STRONG><a name="[9e]"></a>SaveParaToEeprom</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, para.o(i.SaveParaToEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SaveParaToEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCConfig_Master
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIConfig_Master
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTuneWiper
</UL>

<P><STRONG><a name="[d5]"></a>SetNetTimer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, itimer.o(i.SetNetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANNetManage_Master
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANMacIDCheck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Sys_Prco &rArr; Homing &rArr; ChangeModScs &rArr; GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerUpdate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>Sys_Prco</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, plc.o(i.Sys_Prco))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Sys_Prco &rArr; Homing &rArr; ChangeModScs &rArr; GetNewTargetValue &rArr; _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protection
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_ChkPowerStatue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Homing
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewTargetValue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeModScs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDProcess
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataUartDataFromPlc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataPlcDataFromUart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataOutManage
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataLogicManage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpProcess
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDO
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalDI
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[190]"></a>SystemClock_Config</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32g4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; PowerOff_Handle &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1ms_ISR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerISR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[192]"></a>TIM1ms_ISR</STRONG> (Thumb, 632 bytes, Stack size 36 bytes, mc_motorcontrol_layer.o(i.TIM1ms_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM1ms_ISR &rArr; myvpid
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myvpid
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_CC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, stm32g4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[125]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
</UL>

<P><STRONG><a name="[11f]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[136]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d6]"></a>TIM_SetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmdPercent
</UL>

<P><STRONG><a name="[164]"></a>TmpInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, temprature.o(i.TmpInit))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
</UL>

<P><STRONG><a name="[194]"></a>TmpPowerCalRes</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, temprature.o(i.TmpPowerCalRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TmpPowerCalRes
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpProcess
</UL>

<P><STRONG><a name="[18a]"></a>TmpProcess</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, temprature.o(i.TmpProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TmpProcess &rArr; TmpPowerCalRes
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TmpPowerCalRes
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[195]"></a>UART3_IntHandler</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, uartstm32f4.o(i.UART3_IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IntHandler &rArr; UARTWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTWriteBuffer
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>UARTGetBufLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uartstm32f4.o(i.UARTGetBufLen))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTWriteBufArray
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBufArray
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
</UL>

<P><STRONG><a name="[18b]"></a>UARTPkt_DataInManage</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, packet.o(i.UARTPkt_DataInManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UARTPkt_DataInManage &rArr; UARTReadBufArray
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBuffer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBufArray
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetBufLen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXData_to_CtrlRam
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum8_size
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[18c]"></a>UARTPkt_DataLogicManage</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, packet.o(i.UARTPkt_DataLogicManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTPkt_DataLogicManage &rArr; MCL_SetFault
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCL_SetFault
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[18f]"></a>UARTPkt_DataOutManage</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, packet.o(i.UARTPkt_DataOutManage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UARTPkt_DataOutManage &rArr; UARTWriteBufArray &rArr; UARTWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTWriteBufArray
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSum8_size
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[199]"></a>UARTReadBufArray</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uartstm32f4.o(i.UARTReadBufArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTReadBufArray
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBuffer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetBufLen
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
</UL>

<P><STRONG><a name="[197]"></a>UARTReadBuffer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uartstm32f4.o(i.UARTReadBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBufArray
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataInManage
</UL>

<P><STRONG><a name="[19d]"></a>UARTSend</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uartstm32f4.o(i.UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTReadBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataOutManage
</UL>

<P><STRONG><a name="[19c]"></a>UARTWriteBufArray</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, uartstm32f4.o(i.UARTWriteBufArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTWriteBufArray &rArr; UARTWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTWriteBuffer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGetBufLen
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPkt_DataOutManage
</UL>

<P><STRONG><a name="[196]"></a>UARTWriteBuffer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uartstm32f4.o(i.UARTWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTWriteBufArray
</UL>

<P><STRONG><a name="[145]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[146]"></a>UART_CheckIdleState</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[144]"></a>UART_SetConfig</STRONG> (Thumb, 614 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16c]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
</UL>

<P><STRONG><a name="[19e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; UART3_IntHandler &rArr; UARTWriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18d]"></a>UpdataPlcDataFromUart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, packet.o(i.UpdataPlcDataFromUart))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[18e]"></a>UpdataUartDataFromPlc</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, packet.o(i.UpdataUartDataFromPlc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdataUartDataFromPlc
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Prco
</UL>

<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>_GetSetPosition</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, mc_motorcontrol_layer.o(i._GetSetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GetSetPosition &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewTargetValue
</UL>

<P><STRONG><a name="[c6]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>

<P><STRONG><a name="[1be]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1bf]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a4]"></a>iCAN_Prco</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, plc.o(i.iCAN_Prco))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = iCAN_Prco &rArr; PCConfig_Master &rArr; ReadParaValByIndex &rArr; ReadParaFromEeprom &rArr; EepromQualifiedWrite &rArr; EepromWrite &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANLogicOut_Master
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANLogicIn_Master
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCMonitor_Master
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCIdle_Master
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCConfig_Master
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANSysMatch
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIPcIdle_Master
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIMonitor_Master
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIIdle_Master
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMIConfig_Master
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysProcedure
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANNetManage_Master
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataOutManage_Master
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANDataInManage_Master
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFrmSend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = main &rArr; SysInit &rArr; Bsp_Init &rArr; MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCAN_Prco
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNetTimer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetNetTimer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParaFromEeprom
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedWrite
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromQualifiedRead
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[162]"></a>memzero</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, plc.o(i.memzero))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
</UL>

<P><STRONG><a name="[193]"></a>myvpid</STRONG> (Thumb, 420 bytes, Stack size 36 bytes, mc_motorcontrol_layer.o(i.myvpid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = myvpid
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1ms_ISR
</UL>

<P><STRONG><a name="[165]"></a>netTimerInit</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, itimer.o(i.netTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = netTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KillNetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
</UL>

<P><STRONG><a name="[187]"></a>netTimerUpdate</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, itimer.o(i.netTimerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netTimerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[184]"></a>SysInit</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, main.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SysInit &rArr; Bsp_Init &rArr; MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParaToEeprom
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysCtrl
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPara
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCLogic
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPLCCtl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFeedbackDevice
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCommonRam
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICANInitialize
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>MX_ADC1_Init</STRONG> (Thumb, 338 bytes, Stack size 128 bytes, device.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[aa]"></a>MX_ADC2_Init</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, device.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[b0]"></a>MX_ADC3_Init</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, device.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a8]"></a>MX_GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, device.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ab]"></a>MX_SPI3_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, device.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ac]"></a>MX_TIM1_Init</STRONG> (Thumb, 304 bytes, Stack size 128 bytes, device.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_EnableDeadTimePreload
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ad]"></a>MX_TIM2_Init</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, device.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ae]"></a>MX_TIM4_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, device.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[af]"></a>MX_TIM8_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, device.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[b2]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, device.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[e7]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[e5]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[e4]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[96]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[e6]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[e8]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[de]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[db]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart_IT
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[dc]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[dd]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[df]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_adc_ex.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
</UL>

<P><STRONG><a name="[109]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32g4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[10a]"></a>FLASH_Program_Fast</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32g4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[105]"></a>FLASH_MassErase</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[ce]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_OB_PCROPConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_PCROPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[d0]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, stm32g4xx_hal_flash_ex.o(i.FLASH_OB_UserConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_OBProgram
</UL>

<P><STRONG><a name="[ef]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f0]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f1]"></a>DMA_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32g4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[111]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[f3]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32g4xx_hal_fdcan.o(i.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[118]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32g4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[182]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, stm32g4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[183]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32g4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[122]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[135]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32g4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[137]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[138]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32g4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[139]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13a]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32g4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[120]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[121]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32g4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11a]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_ex.o(i.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>

<P><STRONG><a name="[7f]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
<LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[82]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[80]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
<LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[81]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[13f]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32g4xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
