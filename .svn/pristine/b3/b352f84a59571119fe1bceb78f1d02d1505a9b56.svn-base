#include "Device.h"
#include "CommonRam.h"
#include "math.h"
#include  "iCAN.h"
#include  "iTimer.h"
#include  "AutoTune.h"
#include "CanOpen_QexpandAgvV04.h"
#include "user_QExpand.h"
#include "PLCLogic.h"
#include "MC_MotorControl_Layer.h"
void LocalDO(void)
{
	if(gPLCCtl.doDataOut[LED_Y])	
		LED_Y_ON();
	else 
		LED_Y_OFF();
		
	if(gPLCCtl.doDataOut[LED_R])	
		LED_R_ON();
	else 
		LED_R_OFF();

	if (gPLCCtl.doDataOut[DRIVER_EN] == 1)
	{
		DRIVEREN_OFF();  //Driver_DISEN
	}
	else
	{
		DRIVEREN_ON();  //Driver_EN			 //低有效
	}
#if (CTLBOARD_TYPE == _1220_G4)
	#ifdef FAULT_FUNC_ENABLE
	if(gPLCCtl.doDataOut[FAULT_OUT])
		FAULT_HIGH();
	else
		FAULT_LOW();
	if(gPLCCtl.doDataOut[FAULT_OUT_RESET])
	{
		FAULT_RESET();
	}
	else
	{
		FAULT_NORESET();
	}
	#endif
#endif //(CTLBOARD_TYPE == _1220_G4)
	

	//Relay输出控制
	PWMDriver();
	gPara.Driver = (((gPLCCtl.doDataOut[RELAY] ^ 1) << 0)
				 | (gPLCCtl.doDataOut[FAULT_OUT] << 1) 
				 | (gPLCCtl.doDataOut[SOUT1] << 2)
				 | (gPLCCtl.doDataOut[SOUT2] << 3));
}

void LocalDI(void)
{
	INT8U index;
	static 	INT16U bEnaHard = 0;
	
	if(READ_SW1()!=0)
	{
		gPLCCtl.diDataIn.ucInNew[SWI1_R]=1;
	}
	else
	{
		gPLCCtl.diDataIn.ucInNew[SWI1_R]=0;
	}
	
	if(READ_SW2()!=0)
	{
		gPLCCtl.diDataIn.ucInNew[SWI2_R]=1;
	}
	else
	{
		gPLCCtl.diDataIn.ucInNew[SWI2_R]=0;
	}
	
	if(READ_SW3() != 0)
	{
		gPLCCtl.diDataIn.ucInNew[SWI3_R]=1;
	}
	else
	{
		gPLCCtl.diDataIn.ucInNew[SWI3_R]=0;
	}
	#ifdef FAULT_FUNC_ENABLE
	if(READ_FAULTOUT() != 0)
	{
		gPLCCtl.diDataIn.ucInNew[FAULTOUT_R] = 1;
	}
	else
	{
		gPLCCtl.diDataIn.ucInNew[FAULTOUT_R] = 0;
	}
	#endif
//	
//	if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_3)!=0)
//	{
//		gPLCCtl.diDataIn.ucInNew[SWI4_R]=1;
//	}
//	else
//	{
//		gPLCCtl.diDataIn.ucInNew[SWI4_R]=0;
//	}
//	
//	if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_2)!=0)
//	{
//		gPLCCtl.diDataIn.ucInNew[SWI5_R]=1;
//	}
//	else
//	{
//		gPLCCtl.diDataIn.ucInNew[SWI5_R]=0;
//	}	

//	if(READ_CMD2()!=0)  //指令模拟量2 input = High
//	{
//		gPLCCtl.diDataIn.ucInNew[AUTOTUNE_R]=1;
//	}
//	else
//	{
//		gPLCCtl.diDataIn.ucInNew[AUTOTUNE_R]=0;
//	}
	

	for (index=0; index < (sizeof(gPLCCtl.diDataIn.ucIn)/sizeof(gPLCCtl.diDataIn.ucIn[0])); index++)
	{
		if (gPLCCtl.diDataIn.ucInNew[index] != gPLCCtl.diDataIn.ucIn[index])
		{
			if (gPLCCtl.diDataIn.ucInNew[index] == gPLCCtl.diDataIn.ucInOld[index])
			{
				if (gPLCCtl.diDataIn.ucTimer[index] == 0)
				{
					gPLCCtl.diDataIn.ucIn[index] = gPLCCtl.diDataIn.ucInNew[index];
				} 
				else 
				{
					gPLCCtl.diDataIn.ucTimer[index]--;
				}
			} 
			else 
			{
				gPLCCtl.diDataIn.ucInOld[index] = gPLCCtl.diDataIn.ucInNew[index];
				gPLCCtl.diDataIn.ucTimer[index] = DI_FILTER_CONSTANT;
			}
		} 
		else 
		{
			gPLCCtl.diDataIn.ucInOld[index] = gPLCCtl.diDataIn.ucIn[index];
		}
	}	
	
		gPara.Switch =((gPLCCtl.diDataIn.ucIn[SWI1_R] << 0)
					  |(gPLCCtl.diDataIn.ucIn[SWI2_R] << 1)
					  |(gPLCCtl.diDataIn.ucIn[SWI3_R] << 2)
					  |(gPLCCtl.diDataIn.ucIn[AUTOTUNE_R] << 5));
	
		//Enable状态
		if(gPLCCtl.AutoManuelMode==0) //Manuel Mode
		{
			if(gPLCCtl.diDataIn.ucIn[SWI1_R]==1)  //使能信号
			{
				gCRam.bEnaHard = 1;
				KillNetTimer(Timer_SvOffDelay);			
			}
			else 
			{
		 	#ifdef STOP_DELAY //延时去掉使能
				if(gCRam.bEnaSoft)
				{
					gCRam.bEnaHard = 1;
				}
				else
				{
					if(netTimer[Timer_SvOffDelay].bIsStart == false)
					{
						SetNetTimer(Timer_SvOffDelay,gPLCCtl.TrqPreloadCancelDelay);
					}
					else
					{
						if(netTimer[Timer_SvOffDelay].bIsOvertime == true)
						{
							gCRam.bEnaHard = 0;
							KillNetTimer(Timer_SvOffDelay);
						}					
					}
				}
			#else
				if(gPLCCtl.SafeLockHome == 0)
					gCRam.bEnaHard = 0;
				else
					gCRam.bEnaHard = 1;
				
				#ifdef THROTTLE_ZERO_LOCK //
					if(SL_CHK(PLC_THROTTLE_ZERO) && SL_CHK(PLC_MIDDLE_RDY))	//回中完成 且 无指令输入
					{
						if(netTimer[Timer_ZeroThrottleDelay].bIsStart == false)
						{
							SetNetTimer(Timer_ZeroThrottleDelay, (60*1000));	//启动关闭输出计时器 1min
						}
						else
						{
							if(netTimer[Timer_ZeroThrottleDelay].bIsOvertime == true)
							{
								gCRam.bEnaHard = 0;		//关闭使能
							}					
						}
					}
					else
						KillNetTimer(Timer_ZeroThrottleDelay);
				#endif	

			
				
			#endif
			}		
		}else if(gPLCCtl.AutoManuelMode==1) //Auto mode
		{
			/* Bit0.0 AGV Enable */
			if(QExpandAGV_PDO.VCUControlWord & AGVModeEnable_VCUControlWord) 
			{
				gCRam.bEnaHard = 1;
			}
			else
			{
				gCRam.bEnaHard = 0;
			}	
		}
		else
		{
			gCRam.bEnaHard = 0;
		}
		
		if(gCRam.bEnaHard != bEnaHard)
		{
				gCRam.bPwmClose= !gCRam.bEnaHard;
				if(!gCRam.bEnaHard)//
				{
					clrDataBit(gCRam.SI,SYSEN); 
				}
				else//
				{   
						gCRam.SetPos=gCRam.RelPos;
						setDataBit(gCRam.SI,SYSEN);
				}
				bEnaHard=gCRam.bEnaHard;
		}	
	
	#if (USER_TYPE == USER_QEXPANDAGV)
	{
		/*  Auto and Manual switch */
		if(gPLCCtl.AutoManuelMode==0) //manuel mode
		{
			gCRam.NewScs = SCS1_AV;	
			gCRam.NewMod = CTRL_M;	
		}
		else //auto mode
		{
			gCRam.NewScs = SCS0_CAN;
			gCRam.NewMod = CTRL_M;
//			
//			/* Bit4=1 postion mode ; Bit5=1 speed mode */			
//			if(QExpandAGV_PDO.VCUControlWord & MainConn_VCUControlWord) 
//				gCRam.NewMod = CTRL_M;
//			else if(QExpandAGV_PDO.VCUControlWord&0x20) 
//				gCRam.NewMod = CTRL_V;	
//			else
//				gCRam.NewMod = CTRL_NULL;	
					
		}
		
		if(gCRam.NewMod != gPLCCtl.ctrl_mode)
		{
			if(SL_CHK(PLC_MIDDLE_RDY)) //回中成功
			{
				gPLCCtl.ctrl_mode = gCRam.NewMod;
				gCRam.ModCh = 1;
			}
		}		
		if(gCRam.NewScs != gPLCCtl.scs)
		{
			gPLCCtl.scs = gCRam.NewScs;
			gCRam.ScsCh = 1;
			if(gCRam.NewScs == SCS0_CAN)
				SetNetTimer(Timer_HeartBeat,200);
			else
				KillNetTimer(Timer_HeartBeat);
		}	
	}
	#endif	
	
	#ifdef AUTOTUNE_WIP
	//外部IO使能 或者	软件使能 电位计自匹配	
	if((gPLCCtl.diDataIn.ucIn[AUTOTUNE_R]==1) || ((gPara.ConBit2)&0x01))
	{
		AutoTune.Enable = 1;
	}
	else 
	{
		AutoTune.Enable = 0;
	}
	AutoTuneWiper(&AutoTune);
	#endif

}

//内部控制数据 ---> 参数表gPara
void DOProcess(void)
{
	long lTemp;

	/*PRODUCT Group*/ 

	/*STATE Group*/
//	//实际速度滑动滤波
//	gCRam.SpeedAvgAddSum -= gCRam.SpeedAvgBuf[gCRam.SpeedAvgIndex];
//	gCRam.SpeedAvgBuf[gCRam.SpeedAvgIndex] = (INT16S)gCRam.SpeedAvgAdd;
//	gCRam.SpeedAvgAddSum += gCRam.SpeedAvgBuf[gCRam.SpeedAvgIndex++];	
//	gCRam.SpeedAvgIndex &= 0x0f;	
//	gPara.AcMotorSpeed = (gCRam.SpeedAvgAddSum*60000/gPLCCtl.enc)>>8;//rpm	
	
	gPara.AcMotorSpeed = gCRam.SpeedAvgAdd*3750/gPLCCtl.enc;
	gPara.AcMotorSpeedF = gCRam.SetSpeed*60/gPLCCtl.enc;//
	
	lTemp=fabs(gCurrentSample.U-gCurrentSample.W);
	gPara.AcPhaseCurrent = (GetIFromAd(lTemp)+500)/1000;// 四舍五入
	gPara.ControllerTmp  = gPLCCtl.TmpPower;  														//
 	gPara.VBusVoltage = gCurrentSample.VBus*33/(BUS_ADC_CONV_RATIO*4096);		//
 	gPara.KsiVBusVoltage = gCurrentSample.KsiVBus*33/(BUS_ADC_CONV_RATIO*4096);		//
	gPara.ThrottleHighVoltage = gCurrentSample.V5out*33/(POWER5V_CONV_RATIO*4096); //5V
	
	gPara.SteerAngle = (INT16S)((gCRam.RelPos-gCRam.ZeroOffset)*3600/gPLCCtl.CycleLimit);//index 158 0.1°
 	gPara.ErrCode = gPLCCtl.ErrCode;			//index 159
	
	/*SIGNAL Group*/ 
	gPara.ThrottleCmdSpd = gCRam.CmdPercent; //目标命令角度
	gPara.ThrottleWipVoltage = gCRam.WiperVoltage;//(gCRam.WiperVoltage+5)/10;

	gPara.DirectionEncoder1  = gCRam.PosEncoderCnt ;
	
	gPara.Analog1 = gCurrentSample.CmdVal1*33/(ANALOG_ADC_CONV_RATIO*4096);
	gPara.Analog2 = gCurrentSample.CmdVal2*33/(ANALOG_ADC_CONV_RATIO*4096); 
	gPara.MotorEncoder = gCRam.RelPos;		//170	
	gPara.KernelState = gCRam.SI;		//173	
	gPara.AnologOut = gCurrentSample.V12_5OvCurrent2 * AI_5V_12V_OUT1_I_FACTOR;
	
	gPara.Driver = (gPLCCtl.doDataOut[DRIVER_EN] ^ 1);
	
	gPLCCtl.icanSteer.ucSteerAngleH=(gPara.SteerAngle>>8)&0x00ff;
	gPLCCtl.icanSteer.ucSteerAngleL=gPara.SteerAngle&0x00ff;  //SteerAngleL 角度
	gPLCCtl.icanSteer.ucSteerSpeedH=(gPara.AcMotorSpeed>>8)&0x00ff; //速度高字节
	gPLCCtl.icanSteer.ucSteerSpeedL=gPara.AcMotorSpeed&0x00ff;  //速度低字节
	
	#ifdef MICRO_CANOPEN
	uint16_t i;	
	uint16_t saveflag;

	for(i=0;i<PARA_NUM_MONITOR;i++)
	{
		OD[MCO_Search_ODTABLE(0x2000+210+i,0x00)].Val = *(INT16U*)(cMonitorPara_Table[i]->pPrmData);
	}

	//save parameters
	saveflag = OD[MCO_Search_ODTABLE(0x2000,0x00)].Val;
	OD[MCO_Search_ODTABLE(0x2000,0x00)].Val = 0;	//clear saveing OD flag
	if(saveflag)
	{
		for(i=1;i<PARA_NUM_CONFIG;i++)
		{
			SavePara(i,saveflag);
		}	
	}
	#endif
}

