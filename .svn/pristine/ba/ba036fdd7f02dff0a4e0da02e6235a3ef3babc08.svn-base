/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "device.h"
#include "iTimer.h"
#include "CommonRam.h"
#include "PLC.h"
#include "MC_MotorControl_Layer.h"
#include "Packet.h"
/* USER CODE END Includes */
static void SysInit(void);
void SystemClock_Config(void);
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//	#define CAN_TEST_EN
#define FMC_PAGE_SIZE           ((uint16_t)0x800)
#define FLASH_USER_END_ADDR        ((uint32_t)0x08020000)   /* Start @ of user Flash area */

#define FLASH_EN_ID_START_ADDR		 ((uint32_t)FLASH_USER_END_ADDR-FMC_PAGE_SIZE)   /*Enoder area @ FLASH_USER_END_ADDR- FMC_PAGE_SIZE */
#define CAN_BAUDRATE_ADDRESS		 ((uint32_t)FLASH_USER_END_ADDR-FMC_PAGE_SIZE*2)    /* CAN baudrate para @ FLASH_USER_END_ADDR- FMC_PAGE_SIZE*2 */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
	FDCAN_TxHeaderTypeDef TxHeader;
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t TxData[8] = {0};
	uint8_t RxData[8];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef HOMESW_POINT
	/*-----------------断电处理函数---------------------*/
	void PowerOff_Handle(void)
	{
		static uint8_t Flag_SaveOK=0;
		unsigned short HomeFlag;
		
		if((Flag_SaveOK==0) && (gCurrentSample.KsiVBusRaw!=0) && (gCurrentSample.KsiVBusRaw<PVDVOLTAGE_THRESHOLD))  //电源电压低于16V时执行
		{
			if(gCRam.FindZ) //回中OK
			{
				Flag_SaveOK = 1;		
				/**添加断电处理程序**/
				if(gCRam.RelPos<0)
					HomeFlag=1;
				else if(gCRam.RelPos>0)
					HomeFlag=0;
				else
					return;				
//				EepromWrite(EEPROM_PVD_ADDR, HomeFlag);	
				EepromQualifiedWrite(EEPROM_PVD_ADDR, HomeFlag);				
			}
		}
	}
#endif
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	#ifdef _BOOT_REMAP
	{
		uint32_t msp;
//		NVIC_SetVectorTable(0x8004000,0x00);
		SCB->VTOR = 0x8004000 | (0x00 & (uint32_t)0x1FFFFF80);
		msp = *(__IO uint32_t*)0x8004000;
		__set_MSP(msp);
	}
	#endif  //#ifdef STM32G473xx
	  HAL_Init();
	
	SystemClock_Config();
	HAL_Delay(1);
  /* USER CODE END 1 */
	SysInit(); //系统初始化
	HAL_Delay(3);
	
	SetNetTimer(Timer_System,3); 
	SetNetTimer(Timer_iCAN,5);

#ifdef MICRO_CANOPEN
	MCOUSER_ResetCommunication();
#endif		
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	#ifdef IWATCH_DOG_ENABLE
	IWDG_ReloadCounter(); 
	#endif
    /* USER CODE END WHILE */
//	TIM1->CCR1 = (0);	//UVW 0% 
//	TIM1->CCR2 = (0);	//UVW 0% 
    /* USER CODE BEGIN 3 */
		if(netTimer[Timer_System].bIsStart == false)
		{
				SetNetTimer(Timer_System,1); 
		}
		while(netTimer[Timer_System].bIsOvertime)
		{		
			Sys_Prco();			//伺服控制进程
			
			#ifdef MICRO_CANOPEN
			// Operate on CANopen protocol stack
			MCO_ProcessStack();	
			#endif			
			ResetNetTimer(Timer_System);	//复位系统定时触发			
		}		
		
		while(netTimer[Timer_iCAN].bIsOvertime)
		{		
			iCAN_Prco();		//iCAN进程
			
			ResetNetTimer(Timer_iCAN);	//复位系统定时触发			
		}			
  }
  /* USER CODE END 3 */
}
/*******************************************************************************
* Name: SysInit
* Description:
* Input: 
* Output: 
*
* Author: 
* Date: 
* Revision:
*******************************************************************************/
static void SysInit(void)
{
	#ifdef STM32G473xx
	Bsp_Init();
	#endif //#ifdef STM32G473xx
	
	#if (HOURCOUNT_TYPE	== HOURCOUNT_ENABLE)
	//HourCountRead();
	#endif
	PacketInit();
	InitCommonRam();//初始化变量	
	InitPara();//初始化参数列表中的最大值 最小值 初始值
	InitPLCLogic();	
	
	/*******************************************************************************
	* CAN 波特率同步boot底层;
	*******************************************************************************/ 
	#ifdef CAN_BAUDRATE_PARA_ENABLE //修改波特率后，修改flash存储的波特率
	{
		uint32_t u32Temp = *(uint32_t *)CAN_BAUDRATE_ADDRESS;
		switch(u32Temp)
		{
			//合法参数
			case 125:
				if(CAN_BAND_RATE != CAN_125KBPS) //user default changed
				{
					if(CAN_BAND_RATE == CAN_125KBPS)
						gPara.CANBaudrate = 125;
					else if(CAN_BAND_RATE == CAN_250KBPS)
						gPara.CANBaudrate = 250;
					else if(CAN_BAND_RATE == CAN_500KBPS)
						gPara.CANBaudrate = 500;
					else 
						gPara.CANBaudrate = 500;
					SaveParaToEeprom(129, gPara.CANBaudrate);//将flash参数同步到eeprom
				}
				else
					gPara.CANBaudrate = u32Temp;
				break;
			case 250:
				if(CAN_BAND_RATE != CAN_250KBPS) //user default changed
				{
					if(CAN_BAND_RATE == CAN_125KBPS)
						gPara.CANBaudrate = 125;
					else if(CAN_BAND_RATE == CAN_250KBPS)
						gPara.CANBaudrate = 250;
					else if(CAN_BAND_RATE == CAN_500KBPS)
						gPara.CANBaudrate = 500;
					else 
						gPara.CANBaudrate = 500;
					SaveParaToEeprom(129, gPara.CANBaudrate);//将flash参数同步到eeprom
				}
				else
					gPara.CANBaudrate = u32Temp;
				break;
			case 500:
				if(CAN_BAND_RATE != CAN_500KBPS) //user default changed
				{
					if(CAN_BAND_RATE == CAN_125KBPS)
						gPara.CANBaudrate = 125;
					else if(CAN_BAND_RATE == CAN_250KBPS)
						gPara.CANBaudrate = 250;
					else if(CAN_BAND_RATE == CAN_500KBPS)
						gPara.CANBaudrate = 500;
					else 
						gPara.CANBaudrate = 500;
					SaveParaToEeprom(129, gPara.CANBaudrate);//将flash参数同步到eeprom
				}
				else
					gPara.CANBaudrate = u32Temp;
				break;
				
			case 1000:
			default: //非法参数，使用用户定义波特率
				if(CAN_BAND_RATE == CAN_125KBPS)
					gPara.CANBaudrate = 125;
				else if(CAN_BAND_RATE == CAN_250KBPS)
					gPara.CANBaudrate = 250;
				else if(CAN_BAND_RATE == CAN_500KBPS)
					gPara.CANBaudrate = 500;
				else 
					gPara.CANBaudrate = 500;

				SaveParaToEeprom(129, gPara.CANBaudrate);//将flash参数同步到eeprom
				break;			
		}
		
		#ifdef _BOOT_REMAP
//		__disable_irq();
		if(gPara.CANBaudrate != u32Temp)
		{
			uint32_t u32Temp = *(uint32_t *)CAN_BAUDRATE_ADDRESS;
			uint32_t pageError = 0xFFFFFFFF;
			FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
			eraseInit.Page = (CAN_BAUDRATE_ADDRESS - 0X08000000) / 2048;
			eraseInit.NbPages = 1; // 仅擦除一个页
			eraseInit.Banks = FLASH_BANK_1;
			
			if (HAL_OK == HAL_FLASH_Unlock())
			{
				__HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_SR_ERRORS ); 
				HAL_FLASHEx_Erase(&eraseInit, &pageError);
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CAN_BAUDRATE_ADDRESS, (uint32_t)gPara.CANBaudrate);
			}
			HAL_FLASH_Lock();
		}	
//		__enable_irq();
		#endif //#ifdef _BOOT_REMAP
	}
	#endif //#ifdef CAN_BAUDRATE_PARA_ENABLE
	//CAN初始化 （PARA初始化之后执行）
	MX_FDCAN1_Init();	
	HAL_FDCAN_Start(&hfdcan1);
	
	ICANInitialize();
	InitFeedbackDevice();	

	InitSysCtrl();
	InitPLCCtl();
}



/* USER CODE BEGIN 4 */
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 30;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_ADC345;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
